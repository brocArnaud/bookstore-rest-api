/*
 * Created on 2017-11-03 ( Time 15:03:35 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */
package org.demo.web.rest.jaxrs;

import java.util.LinkedList;
import java.util.List;

//--- Entities
import org.demo.data.record.ReviewRecord;
import org.demo.data.record.listitem.ReviewListItem;


//--- Services 
import org.demo.persistence.ReviewPersistence;
// import org.demo.business.service.impl.ReviewServiceImpl;
import org.demo.persistence.commons.PersistenceServiceProvider;
import org.demo.web.rest.commons.AbstractResourceController;



import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

/**
 * JAXRS Jersey controller for 'Review' management.
 */
@Path("/review")
public class ReviewResource extends AbstractResourceController {

	private ReviewPersistence reviewService = PersistenceServiceProvider.getService(ReviewPersistence.class);

	/**
	 * Constructor
	 */
	public ReviewResource() {
		super();
		logger.info("Constructor.");
	}

	/**
	 * Get all review entities.
	 * @return list with all entities found
	 */
	@GET
	@Produces({MediaType.APPLICATION_JSON})
	public List<ReviewRecord> findAll() {
		logger.info("findAll()...");
		return reviewService.findAll();
	}

	/**
	 * Retrieves a review using the given id.
	 * @param customerCode customerCode
	 * @param bookId bookId
	 * @return 200 + body if found, 404 if not found 
	 */
	@GET
	@Path("{customerCode}/{bookId}")
	@Produces({MediaType.APPLICATION_JSON})
	public Response findById(@PathParam("customerCode") String customerCode, @PathParam("bookId") Integer bookId) {
		logger.info("findById("+customerCode+bookId+")...");
		ReviewRecord record = reviewService.findById(customerCode, bookId);
		if ( record != null ) {
			return Response.ok(record).build();
		}
		else {
			return Response.status(Status.NOT_FOUND).build();
		}
	}

	/**
	 * Creates a new review.
	 * @param review review
	 * @return 201 with body if created, 409 conflict if duplicate key 
	 */	
	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	public Response create(ReviewRecord review) {
		logger.info("create()...");
		if ( reviewService.exists(review) ) {
			logger.info("create() : already exists -> conflict");
			return Response.status(Status.CONFLICT).build();
		}
		else {
			logger.info("create() : doesn't exist -> create");
			ReviewRecord record = reviewService.create(review);
			return Response.status(Status.CREATED).entity(record).build();
		}
	}

//------------------------------------------------------------
	/**
	 * Updates the review identified by the given id
	 * @param review review entity
	 * @param customerCode customerCode 
	 * @param bookId bookId 
	 * @return 200 if found and updated, 404 if not found 
	 */	
	@PUT
	@Path("{customerCode}/{bookId}")
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	// public ReviewRecord update(ReviewRecord review, @PathParam("customerCode") String customerCode, @PathParam("bookId") Integer bookId) {
	public Response update(ReviewRecord review, @PathParam("customerCode") String customerCode, @PathParam("bookId") Integer bookId) {
		logger.info("update()...");
		// force the id (use the id provided by the URL)
		review.setCustomerCode( customerCode );
		review.setBookId( bookId );
		boolean updated = reviewService.update(review);
		if ( updated ) {
			// Actually updated (found and updated) => 200 OK
			return Response.status(Status.OK).build();
		}
		else {
			// Not updated with no error => 404 not found
			return Response.status(Status.NOT_FOUND).build();
		}
	}

	/**
	 * Save (create or update) the given review.
	 * @param review review entity
	 * @return 200 if found and updated, 201 if not found and created
	 */	
	@PUT
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	public Response save(ReviewRecord review) {
		logger.info("save()...");
		Status status = Status.OK ; // 200 OK
		if ( ! reviewService.exists(review) ) {
			status = Status.CREATED ; // 201 CREATED
		}
		ReviewRecord record = reviewService.save(review);
		// Response ( code 200 or 201 )
		return Response.status(status).entity(record).build();
	}


//------------------------------------------------------------
	/**
	 * Delete a review.
	 * @param customerCode customerCode
	 * @param bookId bookId
	 */
	@DELETE
	@Path("{customerCode}/{bookId}")
	//@Consumes({MediaType.APPLICATION_JSON})
	// public void delete(@PathParam("customerCode") String customerCode, @PathParam("bookId") Integer bookId) {
	public Response delete(@PathParam("customerCode") String customerCode, @PathParam("bookId") Integer bookId) {
		logger.info("delete("+customerCode+bookId+")...");
		// reviewService.deleteById(customerCode, bookId);
		boolean deleted = reviewService.deleteById(customerCode, bookId);
		if ( deleted ) {
			// Actually deleted (found and deleted) => 204 "No Content" because no body in the response 
			return Response.status(Status.NO_CONTENT).build();
		}
		else {
			// Not deleted with no error => 404 "Not found"
			return Response.status(Status.NOT_FOUND).build();
		}
}

	@GET
	@Path("/reviews-list-items")
	@Produces({MediaType.APPLICATION_JSON})
	public List<ReviewListItem> listItems() {
		logger.info("listItems()...");
		List<ReviewRecord> list = reviewService.findAll();
		List<ReviewListItem> items = new LinkedList<ReviewListItem>();
		for ( ReviewRecord review : list ) {
			items.add(new ReviewListItem( review ) );
		}
		return items;
	}

}
