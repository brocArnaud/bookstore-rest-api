/*
 * Created on 2017-11-09 ( Time 10:27:49 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */
package org.demo.web.rest.jaxrs;

import java.util.LinkedList;
import java.util.List;

//--- Entities
import org.demo.data.record.CustomerRecord;
import org.demo.data.record.listitem.CustomerListItem;


//--- Services 
import org.demo.persistence.CustomerPersistence;
// import org.demo.business.service.impl.CustomerServiceImpl;
import org.demo.persistence.commons.PersistenceServiceProvider;
import org.demo.web.rest.commons.AbstractResourceController;



import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

/**
 * JAXRS Jersey controller for 'Customer' management.
 */
@Path("/customer")
public class CustomerResource extends AbstractResourceController {

	private CustomerPersistence customerService = PersistenceServiceProvider.getService(CustomerPersistence.class);

	/**
	 * Constructor
	 */
	public CustomerResource() {
		super();
		logger.info("Constructor.");
	}

	/**
	 * Get all customer entities.
	 * @return list with all entities found
	 */
	@GET
	@Produces({MediaType.APPLICATION_JSON})
	public List<CustomerRecord> findAll() {
		logger.info("findAll()...");
		return customerService.findAll();
	}

	/**
	 * Retrieves a customer using the given id.
	 * @param code code
	 * @return 200 + body if found, 404 if not found 
	 */
	@GET
	@Path("{code}")
	@Produces({MediaType.APPLICATION_JSON})
	public Response findById(@PathParam("code") String code) {
		logger.info("findById("+code+")...");
		CustomerRecord record = customerService.findById(code);
		if ( record != null ) {
			return Response.ok(record).build();
		}
		else {
			return Response.status(Status.NOT_FOUND).build();
		}
	}

	/**
	 * Creates a new customer.
	 * @param customer customer
	 * @return 201 with body if created, 409 conflict if duplicate key 
	 */	
	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	public Response create(CustomerRecord customer) {
		logger.info("create()...");
		if ( customerService.exists(customer) ) {
			logger.info("create() : already exists -> conflict");
			return Response.status(Status.CONFLICT).build();
		}
		else {
			logger.info("create() : doesn't exist -> create");
			CustomerRecord record = customerService.create(customer);
			return Response.status(Status.CREATED).entity(record).build();
		}
	}

//------------------------------------------------------------
	/**
	 * Updates the customer identified by the given id
	 * @param customer customer entity
	 * @param code code 
	 * @return 200 if found and updated, 404 if not found 
	 */	
	@PUT
	@Path("{code}")
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	// public CustomerRecord update(CustomerRecord customer, @PathParam("code") String code) {
	public Response update(CustomerRecord customer, @PathParam("code") String code) {
		logger.info("update()...");
		// force the id (use the id provided by the URL)
		customer.setCode( code );
		boolean updated = customerService.update(customer);
		if ( updated ) {
			// Actually updated (found and updated) => 200 OK
			return Response.status(Status.OK).build();
		}
		else {
			// Not updated with no error => 404 not found
			return Response.status(Status.NOT_FOUND).build();
		}
	}

	/**
	 * Save (create or update) the given customer.
	 * @param customer customer entity
	 * @return 200 if found and updated, 201 if not found and created
	 */	
	@PUT
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	public Response save(CustomerRecord customer) {
		logger.info("save()...");
		Status status = Status.OK ; // 200 OK
		if ( ! customerService.exists(customer) ) {
			status = Status.CREATED ; // 201 CREATED
		}
		CustomerRecord record = customerService.save(customer);
		// Response ( code 200 or 201 )
		return Response.status(status).entity(record).build();
	}


//------------------------------------------------------------
	/**
	 * Delete a customer.
	 * @param code code
	 */
	@DELETE
	@Path("{code}")
	//@Consumes({MediaType.APPLICATION_JSON})
	// public void delete(@PathParam("code") String code) {
	public Response delete(@PathParam("code") String code) {
		logger.info("delete("+code+")...");
		// customerService.deleteById(code);
		boolean deleted = customerService.deleteById(code);
		if ( deleted ) {
			// Actually deleted (found and deleted) => 204 "No Content" because no body in the response 
			return Response.status(Status.NO_CONTENT).build();
		}
		else {
			// Not deleted with no error => 404 "Not found"
			return Response.status(Status.NOT_FOUND).build();
		}
}

	@GET
	@Path("/customers-list-items")
	@Produces({MediaType.APPLICATION_JSON})
	public List<CustomerListItem> listItems() {
		logger.info("listItems()...");
		List<CustomerRecord> list = customerService.findAll();
		List<CustomerListItem> items = new LinkedList<CustomerListItem>();
		for ( CustomerRecord customer : list ) {
			items.add(new CustomerListItem( customer ) );
		}
		return items;
	}

}
