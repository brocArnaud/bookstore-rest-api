/*
 * Created on 2017-11-03 ( Time 15:03:35 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */
package org.demo.web.rest.jaxrs;

import java.util.LinkedList;
import java.util.List;

//--- Entities
import org.demo.data.record.PublisherRecord;
import org.demo.data.record.listitem.PublisherListItem;


//--- Services 
import org.demo.persistence.PublisherPersistence;
// import org.demo.business.service.impl.PublisherServiceImpl;
import org.demo.persistence.commons.PersistenceServiceProvider;
import org.demo.web.rest.commons.AbstractResourceController;



import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

/**
 * JAXRS Jersey controller for 'Publisher' management.
 */
@Path("/publisher")
public class PublisherResource extends AbstractResourceController {

	private PublisherPersistence publisherService = PersistenceServiceProvider.getService(PublisherPersistence.class);

	/**
	 * Constructor
	 */
	public PublisherResource() {
		super();
		logger.info("Constructor.");
	}

	/**
	 * Get all publisher entities.
	 * @return list with all entities found
	 */
	@GET
	@Produces({MediaType.APPLICATION_JSON})
	public List<PublisherRecord> findAll() {
		logger.info("findAll()...");
		return publisherService.findAll();
	}

	/**
	 * Retrieves a publisher using the given id.
	 * @param code code
	 * @return 200 + body if found, 404 if not found 
	 */
	@GET
	@Path("{code}")
	@Produces({MediaType.APPLICATION_JSON})
	public Response findById(@PathParam("code") Integer code) {
		logger.info("findById("+code+")...");
		PublisherRecord record = publisherService.findById(code);
		if ( record != null ) {
			return Response.ok(record).build();
		}
		else {
			return Response.status(Status.NOT_FOUND).build();
		}
	}

	/**
	 * Creates a new publisher.
	 * @param publisher publisher
	 * @return 201 with body if created, 409 conflict if duplicate key 
	 */	
	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	public Response create(PublisherRecord publisher) {
		logger.info("create()...");
		if ( publisherService.exists(publisher) ) {
			logger.info("create() : already exists -> conflict");
			return Response.status(Status.CONFLICT).build();
		}
		else {
			logger.info("create() : doesn't exist -> create");
			PublisherRecord record = publisherService.create(publisher);
			return Response.status(Status.CREATED).entity(record).build();
		}
	}

//------------------------------------------------------------
	/**
	 * Updates the publisher identified by the given id
	 * @param publisher publisher entity
	 * @param code code 
	 * @return 200 if found and updated, 404 if not found 
	 */	
	@PUT
	@Path("{code}")
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	// public PublisherRecord update(PublisherRecord publisher, @PathParam("code") Integer code) {
	public Response update(PublisherRecord publisher, @PathParam("code") Integer code) {
		logger.info("update()...");
		// force the id (use the id provided by the URL)
		publisher.setCode( code );
		boolean updated = publisherService.update(publisher);
		if ( updated ) {
			// Actually updated (found and updated) => 200 OK
			return Response.status(Status.OK).build();
		}
		else {
			// Not updated with no error => 404 not found
			return Response.status(Status.NOT_FOUND).build();
		}
	}

	/**
	 * Save (create or update) the given publisher.
	 * @param publisher publisher entity
	 * @return 200 if found and updated, 201 if not found and created
	 */	
	@PUT
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	public Response save(PublisherRecord publisher) {
		logger.info("save()...");
		Status status = Status.OK ; // 200 OK
		if ( ! publisherService.exists(publisher) ) {
			status = Status.CREATED ; // 201 CREATED
		}
		PublisherRecord record = publisherService.save(publisher);
		// Response ( code 200 or 201 )
		return Response.status(status).entity(record).build();
	}


//------------------------------------------------------------
	/**
	 * Delete a publisher.
	 * @param code code
	 */
	@DELETE
	@Path("{code}")
	//@Consumes({MediaType.APPLICATION_JSON})
	// public void delete(@PathParam("code") Integer code) {
	public Response delete(@PathParam("code") Integer code) {
		logger.info("delete("+code+")...");
		// publisherService.deleteById(code);
		boolean deleted = publisherService.deleteById(code);
		if ( deleted ) {
			// Actually deleted (found and deleted) => 204 "No Content" because no body in the response 
			return Response.status(Status.NO_CONTENT).build();
		}
		else {
			// Not deleted with no error => 404 "Not found"
			return Response.status(Status.NOT_FOUND).build();
		}
}

	@GET
	@Path("/publishers-list-items")
	@Produces({MediaType.APPLICATION_JSON})
	public List<PublisherListItem> listItems() {
		logger.info("listItems()...");
		List<PublisherRecord> list = publisherService.findAll();
		List<PublisherListItem> items = new LinkedList<PublisherListItem>();
		for ( PublisherRecord publisher : list ) {
			items.add(new PublisherListItem( publisher ) );
		}
		return items;
	}

}
